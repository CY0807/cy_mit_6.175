//
// Generated by Bluespec Compiler (build 14ff62d)
//
// On Thu Jun 15 20:40:43 PDT 2023
//
//
// Ports:
// Name                         I/O  size props
// notFull                        O     1
// RDY_notFull                    O     1 const
// RDY_enq                        O     1
// notEmpty                       O     1
// RDY_notEmpty                   O     1 const
// RDY_deq                        O     1
// first                          O    32 reg
// RDY_first                      O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// enq_x                          I    32
// EN_enq                         I     1
// EN_deq                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCFFifo(CLK,
		RST_N,

		notFull,
		RDY_notFull,

		enq_x,
		EN_enq,
		RDY_enq,

		notEmpty,
		RDY_notEmpty,

		EN_deq,
		RDY_deq,

		first,
		RDY_first);
  input  CLK;
  input  RST_N;

  // value method notFull
  output notFull;
  output RDY_notFull;

  // action method enq
  input  [31 : 0] enq_x;
  input  EN_enq;
  output RDY_enq;

  // value method notEmpty
  output notEmpty;
  output RDY_notEmpty;

  // action method deq
  input  EN_deq;
  output RDY_deq;

  // value method first
  output [31 : 0] first;
  output RDY_first;

  // signals for module outputs
  wire [31 : 0] first;
  wire RDY_deq,
       RDY_enq,
       RDY_first,
       RDY_notEmpty,
       RDY_notFull,
       notEmpty,
       notFull;

  // inlined wires
  wire [32 : 0] cfFifo_enqReq_wires_0$wget;

  // register cfFifo_cnt
  reg [1 : 0] cfFifo_cnt;
  wire [1 : 0] cfFifo_cnt$D_IN;
  wire cfFifo_cnt$EN;

  // register cfFifo_data_0
  reg [31 : 0] cfFifo_data_0;
  wire [31 : 0] cfFifo_data_0$D_IN;
  wire cfFifo_data_0$EN;

  // register cfFifo_data_1
  reg [31 : 0] cfFifo_data_1;
  wire [31 : 0] cfFifo_data_1$D_IN;
  wire cfFifo_data_1$EN;

  // register cfFifo_deqReq_ehrReg
  reg cfFifo_deqReq_ehrReg;
  wire cfFifo_deqReq_ehrReg$D_IN, cfFifo_deqReq_ehrReg$EN;

  // register cfFifo_empty
  reg cfFifo_empty;
  wire cfFifo_empty$D_IN, cfFifo_empty$EN;

  // register cfFifo_enqReq_ehrReg
  reg [32 : 0] cfFifo_enqReq_ehrReg;
  wire [32 : 0] cfFifo_enqReq_ehrReg$D_IN;
  wire cfFifo_enqReq_ehrReg$EN;

  // register cfFifo_full
  reg cfFifo_full;
  wire cfFifo_full$D_IN, cfFifo_full$EN;

  // ports of submodule cfFifo_deqReq_virtual_reg_0
  wire cfFifo_deqReq_virtual_reg_0$D_IN, cfFifo_deqReq_virtual_reg_0$EN;

  // ports of submodule cfFifo_deqReq_virtual_reg_1
  wire cfFifo_deqReq_virtual_reg_1$D_IN,
       cfFifo_deqReq_virtual_reg_1$EN,
       cfFifo_deqReq_virtual_reg_1$Q_OUT;

  // ports of submodule cfFifo_enqReq_virtual_reg_0
  wire cfFifo_enqReq_virtual_reg_0$D_IN, cfFifo_enqReq_virtual_reg_0$EN;

  // ports of submodule cfFifo_enqReq_virtual_reg_1
  wire cfFifo_enqReq_virtual_reg_1$D_IN,
       cfFifo_enqReq_virtual_reg_1$EN,
       cfFifo_enqReq_virtual_reg_1$Q_OUT;

  // rule scheduling signals
  wire CAN_FIRE_RL_cfFifo_canonicalize,
       CAN_FIRE_RL_cfFifo_deqReq_canonicalize,
       CAN_FIRE_RL_cfFifo_enqReq_canonicalize,
       CAN_FIRE_deq,
       CAN_FIRE_enq,
       WILL_FIRE_RL_cfFifo_canonicalize,
       WILL_FIRE_RL_cfFifo_deqReq_canonicalize,
       WILL_FIRE_RL_cfFifo_enqReq_canonicalize,
       WILL_FIRE_deq,
       WILL_FIRE_enq;

  // remaining internal signals
  wire [31 : 0] IF_cfFifo_enqReq_wires_0_whas_THEN_cfFifo_enqR_ETC___d19;
  wire [1 : 0] x__h3179, x__h3213;
  wire IF_cfFifo_deqReq_wires_0_whas__5_THEN_cfFifo_d_ETC___d28,
       IF_cfFifo_enqReq_wires_0_whas_THEN_cfFifo_enqR_ETC___d9,
       NOT_cfFifo_enqReq_virtual_reg_1_read__3_4_AND__ETC___d47,
       NOT_cfFifo_enqReq_virtual_reg_1_read__3_4_AND__ETC___d53,
       NOT_cfFifo_enqReq_virtual_reg_1_read__3_4_AND__ETC___d55,
       NOT_cfFifo_enqReq_virtual_reg_1_read__3_4_AND__ETC___d59,
       NOT_cfFifo_enqReq_virtual_reg_1_read__3_4_AND__ETC___d70,
       cfFifo_deqReq_virtual_reg_1_read__6_OR_IF_cfFi_ETC___d43,
       cfFifo_enqReq_virtual_reg_1_read__3_OR_IF_cfFi_ETC___d48,
       cfFifo_enqReq_virtual_reg_1_read__3_OR_IF_cfFi_ETC___d51;

  // value method notFull
  assign notFull = !cfFifo_full ;
  assign RDY_notFull = 1'd1 ;

  // action method enq
  assign RDY_enq = !cfFifo_full ;
  assign CAN_FIRE_enq = !cfFifo_full ;
  assign WILL_FIRE_enq = EN_enq ;

  // value method notEmpty
  assign notEmpty = !cfFifo_empty ;
  assign RDY_notEmpty = 1'd1 ;

  // action method deq
  assign RDY_deq = !cfFifo_empty ;
  assign CAN_FIRE_deq = !cfFifo_empty ;
  assign WILL_FIRE_deq = EN_deq ;

  // value method first
  assign first = cfFifo_data_1 ;
  assign RDY_first = !cfFifo_empty ;

  // submodule cfFifo_deqReq_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) cfFifo_deqReq_virtual_reg_0(.CLK(CLK),
						       .D_IN(cfFifo_deqReq_virtual_reg_0$D_IN),
						       .EN(cfFifo_deqReq_virtual_reg_0$EN),
						       .Q_OUT());

  // submodule cfFifo_deqReq_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) cfFifo_deqReq_virtual_reg_1(.CLK(CLK),
						       .D_IN(cfFifo_deqReq_virtual_reg_1$D_IN),
						       .EN(cfFifo_deqReq_virtual_reg_1$EN),
						       .Q_OUT(cfFifo_deqReq_virtual_reg_1$Q_OUT));

  // submodule cfFifo_enqReq_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) cfFifo_enqReq_virtual_reg_0(.CLK(CLK),
						       .D_IN(cfFifo_enqReq_virtual_reg_0$D_IN),
						       .EN(cfFifo_enqReq_virtual_reg_0$EN),
						       .Q_OUT());

  // submodule cfFifo_enqReq_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) cfFifo_enqReq_virtual_reg_1(.CLK(CLK),
						       .D_IN(cfFifo_enqReq_virtual_reg_1$D_IN),
						       .EN(cfFifo_enqReq_virtual_reg_1$EN),
						       .Q_OUT(cfFifo_enqReq_virtual_reg_1$Q_OUT));

  // rule RL_cfFifo_canonicalize
  assign CAN_FIRE_RL_cfFifo_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_cfFifo_canonicalize = 1'd1 ;

  // rule RL_cfFifo_enqReq_canonicalize
  assign CAN_FIRE_RL_cfFifo_enqReq_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_cfFifo_enqReq_canonicalize = 1'd1 ;

  // rule RL_cfFifo_deqReq_canonicalize
  assign CAN_FIRE_RL_cfFifo_deqReq_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_cfFifo_deqReq_canonicalize = 1'd1 ;

  // inlined wires
  assign cfFifo_enqReq_wires_0$wget = { 1'd1, enq_x } ;

  // register cfFifo_cnt
  assign cfFifo_cnt$D_IN =
	     (!cfFifo_enqReq_virtual_reg_1$Q_OUT &&
	      IF_cfFifo_enqReq_wires_0_whas_THEN_cfFifo_enqR_ETC___d9 &&
	      cfFifo_deqReq_virtual_reg_1_read__6_OR_IF_cfFi_ETC___d43) ?
	       x__h3179 :
	       x__h3213 ;
  assign cfFifo_cnt$EN =
	     (cfFifo_enqReq_virtual_reg_1_read__3_OR_IF_cfFi_ETC___d48 ||
	      cfFifo_deqReq_virtual_reg_1_read__6_OR_IF_cfFi_ETC___d43) &&
	     NOT_cfFifo_enqReq_virtual_reg_1_read__3_4_AND__ETC___d59 ;

  // register cfFifo_data_0
  assign cfFifo_data_0$D_IN =
	     IF_cfFifo_enqReq_wires_0_whas_THEN_cfFifo_enqR_ETC___d19 ;
  assign cfFifo_data_0$EN =
	     NOT_cfFifo_enqReq_virtual_reg_1_read__3_4_AND__ETC___d70 ;

  // register cfFifo_data_1
  assign cfFifo_data_1$D_IN =
	     NOT_cfFifo_enqReq_virtual_reg_1_read__3_4_AND__ETC___d55 ?
	       IF_cfFifo_enqReq_wires_0_whas_THEN_cfFifo_enqR_ETC___d19 :
	       cfFifo_data_0 ;
  assign cfFifo_data_1$EN =
	     NOT_cfFifo_enqReq_virtual_reg_1_read__3_4_AND__ETC___d53 ;

  // register cfFifo_deqReq_ehrReg
  assign cfFifo_deqReq_ehrReg$D_IN = 1'd0 ;
  assign cfFifo_deqReq_ehrReg$EN = 1'd1 ;

  // register cfFifo_empty
  assign cfFifo_empty$D_IN =
	     cfFifo_enqReq_virtual_reg_1_read__3_OR_IF_cfFi_ETC___d48 ||
	     !cfFifo_deqReq_virtual_reg_1$Q_OUT &&
	     IF_cfFifo_deqReq_wires_0_whas__5_THEN_cfFifo_d_ETC___d28 ;
  assign cfFifo_empty$EN =
	     (cfFifo_enqReq_virtual_reg_1_read__3_OR_IF_cfFi_ETC___d48 ||
	      cfFifo_deqReq_virtual_reg_1_read__6_OR_IF_cfFi_ETC___d43) &&
	     (NOT_cfFifo_enqReq_virtual_reg_1_read__3_4_AND__ETC___d47 ||
	      cfFifo_enqReq_virtual_reg_1_read__3_OR_IF_cfFi_ETC___d48 &&
	      !cfFifo_deqReq_virtual_reg_1$Q_OUT &&
	      IF_cfFifo_deqReq_wires_0_whas__5_THEN_cfFifo_d_ETC___d28 &&
	      cfFifo_cnt != 2'd2) ;

  // register cfFifo_enqReq_ehrReg
  assign cfFifo_enqReq_ehrReg$D_IN = 33'h0AAAAAAAA ;
  assign cfFifo_enqReq_ehrReg$EN = 1'd1 ;

  // register cfFifo_full
  assign cfFifo_full$D_IN =
	     !cfFifo_enqReq_virtual_reg_1$Q_OUT &&
	     IF_cfFifo_enqReq_wires_0_whas_THEN_cfFifo_enqR_ETC___d9 &&
	     cfFifo_deqReq_virtual_reg_1_read__6_OR_IF_cfFi_ETC___d43 ;
  assign cfFifo_full$EN =
	     (cfFifo_enqReq_virtual_reg_1_read__3_OR_IF_cfFi_ETC___d48 ||
	      cfFifo_deqReq_virtual_reg_1_read__6_OR_IF_cfFi_ETC___d43) &&
	     (NOT_cfFifo_enqReq_virtual_reg_1_read__3_4_AND__ETC___d70 ||
	      cfFifo_enqReq_virtual_reg_1_read__3_OR_IF_cfFi_ETC___d51) ;

  // submodule cfFifo_deqReq_virtual_reg_0
  assign cfFifo_deqReq_virtual_reg_0$D_IN = 1'd0 ;
  assign cfFifo_deqReq_virtual_reg_0$EN = EN_deq ;

  // submodule cfFifo_deqReq_virtual_reg_1
  assign cfFifo_deqReq_virtual_reg_1$D_IN = 1'd0 ;
  assign cfFifo_deqReq_virtual_reg_1$EN = 1'd1 ;

  // submodule cfFifo_enqReq_virtual_reg_0
  assign cfFifo_enqReq_virtual_reg_0$D_IN = 1'd0 ;
  assign cfFifo_enqReq_virtual_reg_0$EN = EN_enq ;

  // submodule cfFifo_enqReq_virtual_reg_1
  assign cfFifo_enqReq_virtual_reg_1$D_IN = 1'd0 ;
  assign cfFifo_enqReq_virtual_reg_1$EN = 1'd1 ;

  // remaining internal signals
  assign IF_cfFifo_deqReq_wires_0_whas__5_THEN_cfFifo_d_ETC___d28 =
	     EN_deq || cfFifo_deqReq_ehrReg ;
  assign IF_cfFifo_enqReq_wires_0_whas_THEN_cfFifo_enqR_ETC___d19 =
	     EN_enq ?
	       cfFifo_enqReq_wires_0$wget[31:0] :
	       cfFifo_enqReq_ehrReg[31:0] ;
  assign IF_cfFifo_enqReq_wires_0_whas_THEN_cfFifo_enqR_ETC___d9 =
	     EN_enq ?
	       cfFifo_enqReq_wires_0$wget[32] :
	       cfFifo_enqReq_ehrReg[32] ;
  assign NOT_cfFifo_enqReq_virtual_reg_1_read__3_4_AND__ETC___d47 =
	     !cfFifo_enqReq_virtual_reg_1$Q_OUT &&
	     IF_cfFifo_enqReq_wires_0_whas_THEN_cfFifo_enqR_ETC___d9 &&
	     cfFifo_deqReq_virtual_reg_1_read__6_OR_IF_cfFi_ETC___d43 &&
	     cfFifo_cnt == 2'd0 ;
  assign NOT_cfFifo_enqReq_virtual_reg_1_read__3_4_AND__ETC___d53 =
	     !cfFifo_enqReq_virtual_reg_1$Q_OUT &&
	     IF_cfFifo_enqReq_wires_0_whas_THEN_cfFifo_enqR_ETC___d9 &&
	     !cfFifo_deqReq_virtual_reg_1$Q_OUT &&
	     IF_cfFifo_deqReq_wires_0_whas__5_THEN_cfFifo_d_ETC___d28 ||
	     NOT_cfFifo_enqReq_virtual_reg_1_read__3_4_AND__ETC___d47 ||
	     cfFifo_enqReq_virtual_reg_1_read__3_OR_IF_cfFi_ETC___d51 ;
  assign NOT_cfFifo_enqReq_virtual_reg_1_read__3_4_AND__ETC___d55 =
	     !cfFifo_enqReq_virtual_reg_1$Q_OUT &&
	     IF_cfFifo_enqReq_wires_0_whas_THEN_cfFifo_enqR_ETC___d9 &&
	     (!cfFifo_deqReq_virtual_reg_1$Q_OUT &&
	      IF_cfFifo_deqReq_wires_0_whas__5_THEN_cfFifo_d_ETC___d28 ||
	      cfFifo_deqReq_virtual_reg_1_read__6_OR_IF_cfFi_ETC___d43) ;
  assign NOT_cfFifo_enqReq_virtual_reg_1_read__3_4_AND__ETC___d59 =
	     !cfFifo_enqReq_virtual_reg_1$Q_OUT &&
	     IF_cfFifo_enqReq_wires_0_whas_THEN_cfFifo_enqR_ETC___d9 &&
	     cfFifo_deqReq_virtual_reg_1_read__6_OR_IF_cfFi_ETC___d43 ||
	     cfFifo_enqReq_virtual_reg_1_read__3_OR_IF_cfFi_ETC___d48 &&
	     !cfFifo_deqReq_virtual_reg_1$Q_OUT &&
	     IF_cfFifo_deqReq_wires_0_whas__5_THEN_cfFifo_d_ETC___d28 ;
  assign NOT_cfFifo_enqReq_virtual_reg_1_read__3_4_AND__ETC___d70 =
	     !cfFifo_enqReq_virtual_reg_1$Q_OUT &&
	     IF_cfFifo_enqReq_wires_0_whas_THEN_cfFifo_enqR_ETC___d9 &&
	     cfFifo_deqReq_virtual_reg_1_read__6_OR_IF_cfFi_ETC___d43 &&
	     cfFifo_cnt != 2'd0 ;
  assign cfFifo_deqReq_virtual_reg_1_read__6_OR_IF_cfFi_ETC___d43 =
	     cfFifo_deqReq_virtual_reg_1$Q_OUT ||
	     !EN_deq && !cfFifo_deqReq_ehrReg ;
  assign cfFifo_enqReq_virtual_reg_1_read__3_OR_IF_cfFi_ETC___d48 =
	     cfFifo_enqReq_virtual_reg_1$Q_OUT ||
	     (EN_enq ?
		!cfFifo_enqReq_wires_0$wget[32] :
		!cfFifo_enqReq_ehrReg[32]) ;
  assign cfFifo_enqReq_virtual_reg_1_read__3_OR_IF_cfFi_ETC___d51 =
	     cfFifo_enqReq_virtual_reg_1_read__3_OR_IF_cfFi_ETC___d48 &&
	     !cfFifo_deqReq_virtual_reg_1$Q_OUT &&
	     IF_cfFifo_deqReq_wires_0_whas__5_THEN_cfFifo_d_ETC___d28 &&
	     cfFifo_cnt == 2'd2 ;
  assign x__h3179 = cfFifo_cnt + 2'd1 ;
  assign x__h3213 = cfFifo_cnt - 2'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfFifo_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cfFifo_deqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cfFifo_empty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	cfFifo_enqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	cfFifo_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cfFifo_cnt$EN)
	  cfFifo_cnt <= `BSV_ASSIGNMENT_DELAY cfFifo_cnt$D_IN;
	if (cfFifo_deqReq_ehrReg$EN)
	  cfFifo_deqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      cfFifo_deqReq_ehrReg$D_IN;
	if (cfFifo_empty$EN)
	  cfFifo_empty <= `BSV_ASSIGNMENT_DELAY cfFifo_empty$D_IN;
	if (cfFifo_enqReq_ehrReg$EN)
	  cfFifo_enqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      cfFifo_enqReq_ehrReg$D_IN;
	if (cfFifo_full$EN)
	  cfFifo_full <= `BSV_ASSIGNMENT_DELAY cfFifo_full$D_IN;
      end
    if (cfFifo_data_0$EN)
      cfFifo_data_0 <= `BSV_ASSIGNMENT_DELAY cfFifo_data_0$D_IN;
    if (cfFifo_data_1$EN)
      cfFifo_data_1 <= `BSV_ASSIGNMENT_DELAY cfFifo_data_1$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfFifo_cnt = 2'h2;
    cfFifo_data_0 = 32'hAAAAAAAA;
    cfFifo_data_1 = 32'hAAAAAAAA;
    cfFifo_deqReq_ehrReg = 1'h0;
    cfFifo_empty = 1'h0;
    cfFifo_enqReq_ehrReg = 33'h0AAAAAAAA;
    cfFifo_full = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkCFFifo

