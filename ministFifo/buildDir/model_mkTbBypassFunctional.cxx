/*
 * Generated by Bluespec Compiler (build 14ff62d)
 * 
 * On Sat Jun 10 08:58:49 PDT 2023
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkTbBypassFunctional.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkTbBypassFunctional::MODEL_mkTbBypassFunctional()
{
  mkTbBypassFunctional_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkTbBypassFunctional()
{
  MODEL_mkTbBypassFunctional *model = new MODEL_mkTbBypassFunctional();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkTbBypassFunctional &INST_top = *((MOD_mkTbBypassFunctional *)(instance_ptr));
	 tUInt8 DEF_INST_top_DEF_m_randomA_initialized__h2411;
	 tUInt8 DEF_INST_top_DEF_m_randomB_initialized__h2800;
	 tUInt8 DEF_INST_top_DEF_m_randomC_initialized__h3187;
	 tUInt8 DEF_INST_top_DEF_m_randomData_initialized__h3577;
	 tUInt8 DEF_INST_top_DEF_m_ref_fifo_rv_port1__read__5_BIT_8_6_AND_fifo__ETC___d72;
	 INST_top.DEF_CAN_FIRE_RL_fifo_empty_canonicalize = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_fifo_empty_canonicalize = INST_top.DEF_CAN_FIRE_RL_fifo_empty_canonicalize;
	 INST_top.DEF_CAN_FIRE_RL_fifo_full_canonicalize = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_fifo_full_canonicalize = INST_top.DEF_CAN_FIRE_RL_fifo_full_canonicalize;
	 INST_top.DEF_CAN_FIRE_RL_m_check_fifos_not_empty = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_m_check_fifos_not_empty = INST_top.DEF_CAN_FIRE_RL_m_check_fifos_not_empty;
	 INST_top.DEF_CAN_FIRE_RL_m_check_fifos_not_full = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_m_check_fifos_not_full = INST_top.DEF_CAN_FIRE_RL_m_check_fifos_not_full;
	 INST_top.DEF_CAN_FIRE_RL_m_cycle_inc = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_m_cycle_inc = INST_top.DEF_CAN_FIRE_RL_m_cycle_inc;
	 INST_top.DEF_x__h5889 = INST_top.INST_m_cycle.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_m_init = (INST_top.DEF_x__h5889) == 0u;
	 INST_top.DEF_WILL_FIRE_RL_m_init = INST_top.DEF_CAN_FIRE_RL_m_init;
	 INST_top.DEF_CAN_FIRE_RL_m_randomA_every = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_m_randomA_every = INST_top.DEF_CAN_FIRE_RL_m_randomA_every;
	 DEF_INST_top_DEF_m_randomA_initialized__h2411 = INST_top.INST_m_randomA_initialized.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_m_randomA_every_1 = !DEF_INST_top_DEF_m_randomA_initialized__h2411;
	 INST_top.DEF_WILL_FIRE_RL_m_randomA_every_1 = INST_top.DEF_CAN_FIRE_RL_m_randomA_every_1;
	 INST_top.DEF_CAN_FIRE_RL_m_randomB_every = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_m_randomB_every = INST_top.DEF_CAN_FIRE_RL_m_randomB_every;
	 DEF_INST_top_DEF_m_randomC_initialized__h3187 = INST_top.INST_m_randomC_initialized.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_m_randomC_every_1 = !DEF_INST_top_DEF_m_randomC_initialized__h3187;
	 INST_top.DEF_WILL_FIRE_RL_m_randomC_every_1 = INST_top.DEF_CAN_FIRE_RL_m_randomC_every_1;
	 DEF_INST_top_DEF_m_randomB_initialized__h2800 = INST_top.INST_m_randomB_initialized.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_m_randomB_every_1 = !DEF_INST_top_DEF_m_randomB_initialized__h2800;
	 INST_top.DEF_WILL_FIRE_RL_m_randomB_every_1 = INST_top.DEF_CAN_FIRE_RL_m_randomB_every_1;
	 INST_top.DEF_CAN_FIRE_RL_m_randomC_every = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_m_randomC_every = INST_top.DEF_CAN_FIRE_RL_m_randomC_every;
	 INST_top.DEF_CAN_FIRE_RL_m_randomData_every = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_m_randomData_every = INST_top.DEF_CAN_FIRE_RL_m_randomData_every;
	 DEF_INST_top_DEF_m_randomData_initialized__h3577 = INST_top.INST_m_randomData_initialized.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_m_randomData_every_1 = !DEF_INST_top_DEF_m_randomData_initialized__h3577;
	 INST_top.DEF_WILL_FIRE_RL_m_randomData_every_1 = INST_top.DEF_CAN_FIRE_RL_m_randomData_every_1;
	 INST_top.DEF_x__h5741 = INST_top.INST_m_input_count.METH_read();
	 INST_top.DEF_m_input_count_8_EQ_1024___d100 = (INST_top.DEF_x__h5741) == 1024u;
	 INST_top.DEF_CAN_FIRE_RL_m_stop_tb = INST_top.DEF_m_input_count_8_EQ_1024___d100 || (INST_top.DEF_x__h5889) == 9128u;
	 INST_top.DEF_WILL_FIRE_RL_m_stop_tb = INST_top.DEF_CAN_FIRE_RL_m_stop_tb;
	 if (INST_top.DEF_WILL_FIRE_RL_m_check_fifos_not_full)
	   INST_top.RL_m_check_fifos_not_full();
	 if (INST_top.DEF_WILL_FIRE_RL_m_stop_tb)
	   INST_top.RL_m_stop_tb();
	 if (INST_top.DEF_WILL_FIRE_RL_m_randomA_every)
	   INST_top.RL_m_randomA_every();
	 INST_top.DEF_fifo_full_ehrReg__h1671 = INST_top.INST_fifo_full_ehrReg.METH_read();
	 INST_top.DEF_fifo_full_virtual_reg_1_read____d46 = INST_top.INST_fifo_full_virtual_reg_1.METH_read();
	 INST_top.DEF_fifo_full_virtual_reg_0_read____d47 = INST_top.INST_fifo_full_virtual_reg_0.METH_read();
	 INST_top.DEF_fifo_full_virtual_reg_1_read__6_OR_fifo_full_v_ETC___d50 = INST_top.DEF_fifo_full_virtual_reg_1_read____d46 || (INST_top.DEF_fifo_full_virtual_reg_0_read____d47 || !(INST_top.DEF_fifo_full_ehrReg__h1671));
	 INST_top.DEF_x_wget__h2279 = INST_top.INST_m_randomA_zaz.METH_wget();
	 INST_top.DEF_NOT_m_ref_fifo_rv_port0__read__1_BIT_8_2___d53 = !((tUInt8)(INST_top.INST_m_ref_fifo_rv.METH_port0__read() >> 8u));
	 INST_top.DEF_v__h2417 = INST_top.INST_m_randomA_zaz.METH_whas() ? INST_top.DEF_x_wget__h2279 : (tUInt8)0u;
	 INST_top.DEF_IF_m_randomA_zaz_whas__9_THEN_m_randomA_zaz_wg_ETC___d45 = (INST_top.DEF_v__h2417) == (tUInt8)0u;
	 INST_top.DEF_CAN_FIRE_RL_m_feed_inputs = (DEF_INST_top_DEF_m_randomA_initialized__h2411 && (INST_top.DEF_IF_m_randomA_zaz_whas__9_THEN_m_randomA_zaz_wg_ETC___d45 || (INST_top.DEF_fifo_full_virtual_reg_1_read__6_OR_fifo_full_v_ETC___d50 && (DEF_INST_top_DEF_m_randomData_initialized__h3577 && INST_top.DEF_NOT_m_ref_fifo_rv_port0__read__1_BIT_8_2___d53)))) && (INST_top.DEF_x__h5741) < 1024u;
	 INST_top.DEF_WILL_FIRE_RL_m_feed_inputs = INST_top.DEF_CAN_FIRE_RL_m_feed_inputs;
	 if (INST_top.DEF_WILL_FIRE_RL_m_randomA_every_1)
	   INST_top.RL_m_randomA_every_1();
	 if (INST_top.DEF_WILL_FIRE_RL_m_randomB_every)
	   INST_top.RL_m_randomB_every();
	 if (INST_top.DEF_WILL_FIRE_RL_m_randomB_every_1)
	   INST_top.RL_m_randomB_every_1();
	 if (INST_top.DEF_WILL_FIRE_RL_m_randomC_every)
	   INST_top.RL_m_randomC_every();
	 if (INST_top.DEF_WILL_FIRE_RL_m_randomC_every_1)
	   INST_top.RL_m_randomC_every_1();
	 if (INST_top.DEF_WILL_FIRE_RL_m_randomData_every)
	   INST_top.RL_m_randomData_every();
	 if (INST_top.DEF_WILL_FIRE_RL_m_feed_inputs)
	   INST_top.RL_m_feed_inputs();
	 INST_top.DEF_fifo_empty_virtual_reg_1_read____d67 = INST_top.INST_fifo_empty_virtual_reg_1.METH_read();
	 INST_top.DEF_m_ref_fifo_rv_port1__read____d65 = INST_top.INST_m_ref_fifo_rv.METH_port1__read();
	 INST_top.DEF_fifo_empty_wires_0_wget____d4 = INST_top.INST_fifo_empty_wires_0.METH_wget();
	 INST_top.DEF_fifo_empty_wires_0_whas____d3 = INST_top.INST_fifo_empty_wires_0.METH_whas();
	 INST_top.DEF_fifo_empty_ehrReg__h5359 = INST_top.INST_fifo_empty_ehrReg.METH_read();
	 INST_top.DEF_fifo_empty_virtual_reg_1_read__7_OR_IF_fifo_em_ETC___d71 = INST_top.DEF_fifo_empty_virtual_reg_1_read____d67 || (INST_top.DEF_fifo_empty_wires_0_whas____d3 ? !(INST_top.DEF_fifo_empty_wires_0_wget____d4) : !(INST_top.DEF_fifo_empty_ehrReg__h5359));
	 INST_top.DEF_m_ref_fifo_rv_port1__read__5_BIT_8___d66 = (tUInt8)((INST_top.DEF_m_ref_fifo_rv_port1__read____d65) >> 8u);
	 DEF_INST_top_DEF_m_ref_fifo_rv_port1__read__5_BIT_8_6_AND_fifo__ETC___d72 = INST_top.DEF_m_ref_fifo_rv_port1__read__5_BIT_8___d66 && INST_top.DEF_fifo_empty_virtual_reg_1_read__7_OR_IF_fifo_em_ETC___d71;
	 INST_top.DEF_CAN_FIRE_RL_m_check_fifos_first = DEF_INST_top_DEF_m_ref_fifo_rv_port1__read__5_BIT_8_6_AND_fifo__ETC___d72;
	 INST_top.DEF_WILL_FIRE_RL_m_check_fifos_first = INST_top.DEF_CAN_FIRE_RL_m_check_fifos_first && !(INST_top.DEF_WILL_FIRE_RL_m_feed_inputs);
	 INST_top.DEF_x_wget__h2669 = INST_top.INST_m_randomB_zaz.METH_wget();
	 INST_top.DEF_v__h2806 = INST_top.INST_m_randomB_zaz.METH_whas() ? INST_top.DEF_x_wget__h2669 : (tUInt8)0u;
	 INST_top.DEF_IF_m_randomB_zaz_whas__6_THEN_m_randomB_zaz_wg_ETC___d64 = (INST_top.DEF_v__h2806) == (tUInt8)0u;
	 INST_top.DEF_CAN_FIRE_RL_m_check_outputs = (DEF_INST_top_DEF_m_randomB_initialized__h2800 && (INST_top.DEF_IF_m_randomB_zaz_whas__6_THEN_m_randomB_zaz_wg_ETC___d64 || DEF_INST_top_DEF_m_ref_fifo_rv_port1__read__5_BIT_8_6_AND_fifo__ETC___d72)) && !(INST_top.DEF_CAN_FIRE_RL_m_randomB_every_1);
	 INST_top.DEF_WILL_FIRE_RL_m_check_outputs = INST_top.DEF_CAN_FIRE_RL_m_check_outputs && !(INST_top.DEF_WILL_FIRE_RL_m_feed_inputs);
	 if (INST_top.DEF_WILL_FIRE_RL_m_check_fifos_not_empty)
	   INST_top.RL_m_check_fifos_not_empty();
	 if (INST_top.DEF_WILL_FIRE_RL_m_check_fifos_first)
	   INST_top.RL_m_check_fifos_first();
	 if (INST_top.DEF_WILL_FIRE_RL_m_check_outputs)
	   INST_top.RL_m_check_outputs();
	 if (INST_top.DEF_WILL_FIRE_RL_fifo_empty_canonicalize)
	   INST_top.RL_fifo_empty_canonicalize();
	 if (INST_top.DEF_WILL_FIRE_RL_fifo_full_canonicalize)
	   INST_top.RL_fifo_full_canonicalize();
	 if (INST_top.DEF_WILL_FIRE_RL_m_randomData_every_1)
	   INST_top.RL_m_randomData_every_1();
	 if (INST_top.DEF_WILL_FIRE_RL_m_init)
	   INST_top.RL_m_init();
	 if (INST_top.DEF_WILL_FIRE_RL_m_cycle_inc)
	   INST_top.RL_m_cycle_inc();
	 INST_top.INST_m_randomData_zaz.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_m_randomData_ignore.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_m_randomC_zaz.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_m_randomC_ignore.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_m_randomB_zaz.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_m_randomB_ignore.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_m_randomA_zaz.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_m_randomA_ignore.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_m_ref_fifo_rv.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_fifo_full_ignored_wires_1.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_fifo_full_ignored_wires_0.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_fifo_full_wires_1.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_fifo_full_wires_0.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_fifo_empty_ignored_wires_1.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_fifo_empty_ignored_wires_0.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_fifo_empty_wires_1.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_fifo_empty_wires_0.clk((tUInt8)1u, (tUInt8)1u);
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_fifo_empty_ehrReg.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_fifo_full_ehrReg.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m_ref_fifo_rv.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_m_cycle.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m_input_count.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m_output_count.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m_randomA_initialized.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m_randomB_initialized.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m_randomC_initialized.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m_randomData_initialized.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkTbBypassFunctional::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkTbBypassFunctional_instance = new MOD_mkTbBypassFunctional(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkTbBypassFunctional_instance->INST_fifo_empty_wires_0.set_clk_0)("CLK");
  (mkTbBypassFunctional_instance->INST_fifo_empty_wires_1.set_clk_0)("CLK");
  (mkTbBypassFunctional_instance->INST_fifo_empty_ignored_wires_0.set_clk_0)("CLK");
  (mkTbBypassFunctional_instance->INST_fifo_empty_ignored_wires_1.set_clk_0)("CLK");
  (mkTbBypassFunctional_instance->INST_fifo_full_wires_0.set_clk_0)("CLK");
  (mkTbBypassFunctional_instance->INST_fifo_full_wires_1.set_clk_0)("CLK");
  (mkTbBypassFunctional_instance->INST_fifo_full_ignored_wires_0.set_clk_0)("CLK");
  (mkTbBypassFunctional_instance->INST_fifo_full_ignored_wires_1.set_clk_0)("CLK");
  (mkTbBypassFunctional_instance->INST_m_ref_fifo_rv.set_clk_0)("CLK");
  (mkTbBypassFunctional_instance->INST_m_randomA_ignore.set_clk_0)("CLK");
  (mkTbBypassFunctional_instance->INST_m_randomA_zaz.set_clk_0)("CLK");
  (mkTbBypassFunctional_instance->INST_m_randomB_ignore.set_clk_0)("CLK");
  (mkTbBypassFunctional_instance->INST_m_randomB_zaz.set_clk_0)("CLK");
  (mkTbBypassFunctional_instance->INST_m_randomC_ignore.set_clk_0)("CLK");
  (mkTbBypassFunctional_instance->INST_m_randomC_zaz.set_clk_0)("CLK");
  (mkTbBypassFunctional_instance->INST_m_randomData_ignore.set_clk_0)("CLK");
  (mkTbBypassFunctional_instance->INST_m_randomData_zaz.set_clk_0)("CLK");
  (mkTbBypassFunctional_instance->set_clk_0)("CLK");
}
void MODEL_mkTbBypassFunctional::destroy_model()
{
  delete mkTbBypassFunctional_instance;
  mkTbBypassFunctional_instance = NULL;
}
void MODEL_mkTbBypassFunctional::reset_model(bool asserted)
{
  (mkTbBypassFunctional_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkTbBypassFunctional::get_instance()
{
  return mkTbBypassFunctional_instance;
}

/* Fill in version numbers */
void MODEL_mkTbBypassFunctional::get_version(unsigned int *year,
					     unsigned int *month,
					     char const **annotation,
					     char const **build)
{
  *year = 0u;
  *month = 0u;
  *annotation = NULL;
  *build = "14ff62d";
}

/* Get the model creation time */
time_t MODEL_mkTbBypassFunctional::get_creation_time()
{
  
  /* Sat Jun 10 15:58:49 UTC 2023 */
  return 1686412729llu;
}

/* State dumping function */
void MODEL_mkTbBypassFunctional::dump_state()
{
  (mkTbBypassFunctional_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkTbBypassFunctional & mkTbBypassFunctional_backing(tSimStateHdl simHdl)
{
  static MOD_mkTbBypassFunctional *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkTbBypassFunctional(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkTbBypassFunctional::dump_VCD_defs()
{
  (mkTbBypassFunctional_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkTbBypassFunctional::dump_VCD(tVCDDumpType dt)
{
  (mkTbBypassFunctional_instance->dump_VCD)(dt,
					    vcd_depth(sim_hdl),
					    mkTbBypassFunctional_backing(sim_hdl));
}
