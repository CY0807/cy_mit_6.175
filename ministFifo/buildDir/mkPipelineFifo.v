//
// Generated by Bluespec Compiler (build 14ff62d)
//
// On Thu Jun 15 20:40:43 PDT 2023
//
//
// Ports:
// Name                         I/O  size props
// notFull                        O     1
// RDY_notFull                    O     1 const
// RDY_enq                        O     1
// notEmpty                       O     1
// RDY_notEmpty                   O     1 const
// RDY_deq                        O     1
// first                          O    32 reg
// RDY_first                      O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// enq_x                          I    32 reg
// EN_enq                         I     1
// EN_deq                         I     1
//
// Combinational paths from inputs to outputs:
//   EN_deq -> notFull
//   EN_deq -> RDY_enq
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPipelineFifo(CLK,
		      RST_N,

		      notFull,
		      RDY_notFull,

		      enq_x,
		      EN_enq,
		      RDY_enq,

		      notEmpty,
		      RDY_notEmpty,

		      EN_deq,
		      RDY_deq,

		      first,
		      RDY_first);
  input  CLK;
  input  RST_N;

  // value method notFull
  output notFull;
  output RDY_notFull;

  // action method enq
  input  [31 : 0] enq_x;
  input  EN_enq;
  output RDY_enq;

  // value method notEmpty
  output notEmpty;
  output RDY_notEmpty;

  // action method deq
  input  EN_deq;
  output RDY_deq;

  // value method first
  output [31 : 0] first;
  output RDY_first;

  // signals for module outputs
  wire [31 : 0] first;
  wire RDY_deq,
       RDY_enq,
       RDY_first,
       RDY_notEmpty,
       RDY_notFull,
       notEmpty,
       notFull;

  // register pipelineFifo_data
  reg [31 : 0] pipelineFifo_data;
  wire [31 : 0] pipelineFifo_data$D_IN;
  wire pipelineFifo_data$EN;

  // register pipelineFifo_empty_ehrReg
  reg pipelineFifo_empty_ehrReg;
  wire pipelineFifo_empty_ehrReg$D_IN, pipelineFifo_empty_ehrReg$EN;

  // register pipelineFifo_full_ehrReg
  reg pipelineFifo_full_ehrReg;
  wire pipelineFifo_full_ehrReg$D_IN, pipelineFifo_full_ehrReg$EN;

  // ports of submodule pipelineFifo_empty_virtual_reg_0
  wire pipelineFifo_empty_virtual_reg_0$D_IN,
       pipelineFifo_empty_virtual_reg_0$EN,
       pipelineFifo_empty_virtual_reg_0$Q_OUT;

  // ports of submodule pipelineFifo_empty_virtual_reg_1
  wire pipelineFifo_empty_virtual_reg_1$D_IN,
       pipelineFifo_empty_virtual_reg_1$EN,
       pipelineFifo_empty_virtual_reg_1$Q_OUT;

  // ports of submodule pipelineFifo_full_virtual_reg_0
  wire pipelineFifo_full_virtual_reg_0$D_IN,
       pipelineFifo_full_virtual_reg_0$EN;

  // ports of submodule pipelineFifo_full_virtual_reg_1
  wire pipelineFifo_full_virtual_reg_1$D_IN,
       pipelineFifo_full_virtual_reg_1$EN,
       pipelineFifo_full_virtual_reg_1$Q_OUT;

  // rule scheduling signals
  wire CAN_FIRE_RL_pipelineFifo_empty_canonicalize,
       CAN_FIRE_RL_pipelineFifo_full_canonicalize,
       CAN_FIRE_deq,
       CAN_FIRE_enq,
       WILL_FIRE_RL_pipelineFifo_empty_canonicalize,
       WILL_FIRE_RL_pipelineFifo_full_canonicalize,
       WILL_FIRE_deq,
       WILL_FIRE_enq;

  // value method notFull
  assign notFull =
	     pipelineFifo_full_virtual_reg_1$Q_OUT || EN_deq ||
	     !pipelineFifo_full_ehrReg ;
  assign RDY_notFull = 1'd1 ;

  // action method enq
  assign RDY_enq = notFull ;
  assign CAN_FIRE_enq = notFull ;
  assign WILL_FIRE_enq = EN_enq ;

  // value method notEmpty
  assign notEmpty =
	     pipelineFifo_empty_virtual_reg_1$Q_OUT ||
	     pipelineFifo_empty_virtual_reg_0$Q_OUT ||
	     !pipelineFifo_empty_ehrReg ;
  assign RDY_notEmpty = 1'd1 ;

  // action method deq
  assign RDY_deq = notEmpty ;
  assign CAN_FIRE_deq = notEmpty ;
  assign WILL_FIRE_deq = EN_deq ;

  // value method first
  assign first = pipelineFifo_data ;
  assign RDY_first = notEmpty ;

  // submodule pipelineFifo_empty_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) pipelineFifo_empty_virtual_reg_0(.CLK(CLK),
							    .D_IN(pipelineFifo_empty_virtual_reg_0$D_IN),
							    .EN(pipelineFifo_empty_virtual_reg_0$EN),
							    .Q_OUT(pipelineFifo_empty_virtual_reg_0$Q_OUT));

  // submodule pipelineFifo_empty_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) pipelineFifo_empty_virtual_reg_1(.CLK(CLK),
							    .D_IN(pipelineFifo_empty_virtual_reg_1$D_IN),
							    .EN(pipelineFifo_empty_virtual_reg_1$EN),
							    .Q_OUT(pipelineFifo_empty_virtual_reg_1$Q_OUT));

  // submodule pipelineFifo_full_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) pipelineFifo_full_virtual_reg_0(.CLK(CLK),
							   .D_IN(pipelineFifo_full_virtual_reg_0$D_IN),
							   .EN(pipelineFifo_full_virtual_reg_0$EN),
							   .Q_OUT());

  // submodule pipelineFifo_full_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) pipelineFifo_full_virtual_reg_1(.CLK(CLK),
							   .D_IN(pipelineFifo_full_virtual_reg_1$D_IN),
							   .EN(pipelineFifo_full_virtual_reg_1$EN),
							   .Q_OUT(pipelineFifo_full_virtual_reg_1$Q_OUT));

  // rule RL_pipelineFifo_empty_canonicalize
  assign CAN_FIRE_RL_pipelineFifo_empty_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_pipelineFifo_empty_canonicalize = 1'd1 ;

  // rule RL_pipelineFifo_full_canonicalize
  assign CAN_FIRE_RL_pipelineFifo_full_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_pipelineFifo_full_canonicalize = 1'd1 ;

  // register pipelineFifo_data
  assign pipelineFifo_data$D_IN = enq_x ;
  assign pipelineFifo_data$EN = EN_enq ;

  // register pipelineFifo_empty_ehrReg
  assign pipelineFifo_empty_ehrReg$D_IN =
	     !EN_enq && (EN_deq || pipelineFifo_empty_ehrReg) ;
  assign pipelineFifo_empty_ehrReg$EN = 1'd1 ;

  // register pipelineFifo_full_ehrReg
  assign pipelineFifo_full_ehrReg$D_IN =
	     EN_enq || !EN_deq && pipelineFifo_full_ehrReg ;
  assign pipelineFifo_full_ehrReg$EN = 1'd1 ;

  // submodule pipelineFifo_empty_virtual_reg_0
  assign pipelineFifo_empty_virtual_reg_0$D_IN = 1'd0 ;
  assign pipelineFifo_empty_virtual_reg_0$EN = EN_deq ;

  // submodule pipelineFifo_empty_virtual_reg_1
  assign pipelineFifo_empty_virtual_reg_1$D_IN = 1'd0 ;
  assign pipelineFifo_empty_virtual_reg_1$EN = EN_enq ;

  // submodule pipelineFifo_full_virtual_reg_0
  assign pipelineFifo_full_virtual_reg_0$D_IN = 1'd0 ;
  assign pipelineFifo_full_virtual_reg_0$EN = EN_deq ;

  // submodule pipelineFifo_full_virtual_reg_1
  assign pipelineFifo_full_virtual_reg_1$D_IN = 1'd0 ;
  assign pipelineFifo_full_virtual_reg_1$EN = EN_enq ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        pipelineFifo_empty_ehrReg <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pipelineFifo_full_ehrReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (pipelineFifo_empty_ehrReg$EN)
	  pipelineFifo_empty_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      pipelineFifo_empty_ehrReg$D_IN;
	if (pipelineFifo_full_ehrReg$EN)
	  pipelineFifo_full_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      pipelineFifo_full_ehrReg$D_IN;
      end
    if (pipelineFifo_data$EN)
      pipelineFifo_data <= `BSV_ASSIGNMENT_DELAY pipelineFifo_data$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    pipelineFifo_data = 32'hAAAAAAAA;
    pipelineFifo_empty_ehrReg = 1'h0;
    pipelineFifo_full_ehrReg = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkPipelineFifo

